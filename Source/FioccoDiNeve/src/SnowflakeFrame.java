
import java.awt.Color;
import java.io.IOException;
import java.nio.file.Path;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mosè Ferrazzini
 * @version 20.12.2019
 */
public class SnowflakeFrame extends javax.swing.JFrame {

    /**
     * Se la darmode è abilitata true = abilitata.
     */
    private boolean darkmodeEnabled = false;
    /**
     * Se subtract è abilitato true = subtract, false = intersect
     */
    private boolean subtractEnabled = true;

    /**
     * Creates new form SnowflakeFrame
     */
    public SnowflakeFrame() {
        ImageIcon imgicon = new ImageIcon("../flakeIcon.ico");
        this.setIconImage(imgicon.getImage());
        initComponents();
        snowflakePanel1.setVisible(true);
        this.switchDarkmode();
        this.setTitle("Snowflake");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        generaLiveButton = new javax.swing.JButton();
        savePointsButton = new javax.swing.JButton();
        importPointsButton = new javax.swing.JButton();
        deletePointsButton = new javax.swing.JButton();
        selectModePanel = new javax.swing.JPanel();
        subtractCheckBox = new javax.swing.JCheckBox();
        intersectCheckBox = new javax.swing.JCheckBox();
        showPointsCheckBox = new javax.swing.JCheckBox();
        darkmodeCheckBox = new javax.swing.JCheckBox();
        snowflakePanel1 = new SnowflakePanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(650, 500));
        setName("SnowflakeFrame"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(550, 650));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        leftPanel.setLayout(new java.awt.GridLayout(7, 1));

        generaLiveButton.setText("Genera live");
        generaLiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generaLiveButtonActionPerformed(evt);
            }
        });
        leftPanel.add(generaLiveButton);

        savePointsButton.setText("Save Points");
        savePointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePointsButtonActionPerformed(evt);
            }
        });
        leftPanel.add(savePointsButton);

        importPointsButton.setText("Import Points");
        importPointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPointsButtonActionPerformed(evt);
            }
        });
        leftPanel.add(importPointsButton);

        deletePointsButton.setText("Delete points");
        deletePointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePointsButtonActionPerformed(evt);
            }
        });
        leftPanel.add(deletePointsButton);

        selectModePanel.setLayout(new java.awt.GridLayout(2, 1));

        subtractCheckBox.setSelected(true);
        subtractCheckBox.setText("Subtract");
        subtractCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractCheckBoxActionPerformed(evt);
            }
        });
        selectModePanel.add(subtractCheckBox);

        intersectCheckBox.setText("Intersect");
        intersectCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intersectCheckBoxActionPerformed(evt);
            }
        });
        selectModePanel.add(intersectCheckBox);

        leftPanel.add(selectModePanel);

        showPointsCheckBox.setSelected(true);
        showPointsCheckBox.setText("Show Points");
        showPointsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPointsCheckBoxActionPerformed(evt);
            }
        });
        leftPanel.add(showPointsCheckBox);

        darkmodeCheckBox.setText("Darkmode");
        darkmodeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                darkmodeCheckBoxActionPerformed(evt);
            }
        });
        leftPanel.add(darkmodeCheckBox);

        getContentPane().add(leftPanel, java.awt.BorderLayout.LINE_START);

        snowflakePanel1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(snowflakePanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generaLiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generaLiveButtonActionPerformed
        snowflakePanel1.switchLive();
    }//GEN-LAST:event_generaLiveButtonActionPerformed

    private void deletePointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePointsButtonActionPerformed
        snowflakePanel1.deletePoints();
    }//GEN-LAST:event_deletePointsButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
 
    }//GEN-LAST:event_formComponentResized

    private void savePointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePointsButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("snowflake files (*.flake)", "flake");
        chooser.addChoosableFileFilter(filter);
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Save points");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Path dest = chooser.getSelectedFile().toPath();
            try {
                Saver s = new Saver(snowflakePanel1.getCutPoints(), snowflakePanel1.getTrianglePoints(), dest);
                showMessageDialog(null, "Punti in salvati in " + dest.getFileName() + " con successo!");
            } catch (IOException ioe) {
                showMessageDialog(null, "C'è stato un errore nel salvataggio, riprova!");
            }
        }
    }//GEN-LAST:event_savePointsButtonActionPerformed

    private void importPointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importPointsButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("snowflake files (*.flake)", "flake");
        chooser.addChoosableFileFilter(filter);
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Import points");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Path origine = chooser.getSelectedFile().toPath();
            try {
                Saver s = new Saver(origine);
                snowflakePanel1.setTrianglePoints(s.getTrianglePoints());
                snowflakePanel1.setCutPoints(s.getCutPoints());
            }catch (IOException ioe) {
                showMessageDialog(null, "Impossibile leggere il file.");
            }
        }
    }//GEN-LAST:event_importPointsButtonActionPerformed

    private void darkmodeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_darkmodeCheckBoxActionPerformed
        darkmodeEnabled = !darkmodeEnabled;
        switchDarkmode();
        snowflakePanel1.switchDarkmode();
    }//GEN-LAST:event_darkmodeCheckBoxActionPerformed

    private void subtractCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractCheckBoxActionPerformed
        if(subtractCheckBox.isSelected()) {
            intersectCheckBox.setSelected(false);
            subtractEnabled = true;
        }else{
            intersectCheckBox.setSelected(true);
            subtractEnabled = false;
        }
        snowflakePanel1.setMode(subtractEnabled);
    }//GEN-LAST:event_subtractCheckBoxActionPerformed

    private void intersectCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intersectCheckBoxActionPerformed
        if(intersectCheckBox.isSelected()) {
            subtractCheckBox.setSelected(false);
            subtractEnabled = false;
        }else{
            subtractCheckBox.setSelected(true);
            subtractEnabled = true;
        }
        snowflakePanel1.setMode(subtractEnabled);
    }//GEN-LAST:event_intersectCheckBoxActionPerformed

    private void showPointsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPointsCheckBoxActionPerformed
        snowflakePanel1.switchShowPoints();
    }//GEN-LAST:event_showPointsCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnowflakeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnowflakeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnowflakeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnowflakeFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SnowflakeFrame().setVisible(true);
            }
        });
    }
    
    public void switchDarkmode() {
        if(darkmodeEnabled) {
             generaLiveButton.setBackground(Color.BLACK);
             generaLiveButton.setForeground(Color.WHITE);
             savePointsButton.setBackground(Color.BLACK);
             savePointsButton.setForeground(Color.WHITE);
             leftPanel.setBackground(Color.DARK_GRAY);       
             darkmodeCheckBox.setForeground(Color.WHITE);
             darkmodeCheckBox.setBackground(Color.BLACK); 
             deletePointsButton.setForeground(Color.WHITE);
             deletePointsButton.setBackground(Color.BLACK);
             importPointsButton.setForeground(Color.WHITE);
             importPointsButton.setBackground(Color.BLACK);
             subtractCheckBox.setForeground(Color.WHITE);
             intersectCheckBox.setForeground(Color.WHITE);
             selectModePanel.setBackground(Color.DARK_GRAY);
             showPointsCheckBox.setForeground(Color.WHITE);
        }else{
             generaLiveButton.setBackground(Color.WHITE);
             generaLiveButton.setForeground(Color.BLACK);
             savePointsButton.setBackground(Color.WHITE);
             savePointsButton.setForeground(Color.BLACK);
             leftPanel.setBackground(Color.WHITE);
             darkmodeCheckBox.setForeground(Color.BLACK);
             darkmodeCheckBox.setBackground(Color.WHITE); 
             deletePointsButton.setForeground(Color.BLACK);
             deletePointsButton.setBackground(Color.WHITE);
             importPointsButton.setForeground(Color.BLACK);
             importPointsButton.setBackground(Color.WHITE);
             subtractCheckBox.setForeground(Color.BLACK);
             intersectCheckBox.setForeground(Color.BLACK);
             selectModePanel.setBackground(Color.WHITE);
             showPointsCheckBox.setForeground(Color.BLACK);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox darkmodeCheckBox;
    private javax.swing.JButton deletePointsButton;
    private javax.swing.JButton generaLiveButton;
    private javax.swing.JButton importPointsButton;
    private javax.swing.JCheckBox intersectCheckBox;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JButton savePointsButton;
    private javax.swing.JPanel selectModePanel;
    private javax.swing.JCheckBox showPointsCheckBox;
    protected SnowflakePanel snowflakePanel1;
    private javax.swing.JCheckBox subtractCheckBox;
    // End of variables declaration//GEN-END:variables
}
